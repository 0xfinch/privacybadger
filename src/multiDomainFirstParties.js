/**
 * Some thoughts about how to handle multi domain first parites.
 * Given a data strucutre like the one below we could implement the following 
 * pseudo code.
 * function isMultiDomainFirstParty(domain1, domain2):
 *   for list in multiDomainFirstPartiesArray:  // the below data structure
 *     if list.contains(domain1) and list.contains(domain2):
 *       return true
 *   return false
 *
 *   This list should be manually curated but could be generated by crawlilng
 *   whois data, DNT data, certificate info, etc. 
 **/ 
var multiDomainFirstPartiesArray = [
  ["google.com", "youtube.com", "gstatic.com", "googleapis.com", "googleusercontent.com"],
  ["facebook.com", "fbcdn.com", "facebook.net"],
  ["newyorktimes.com", "nyt.com"],
  ["yahooapis.com", "yimg.com", "yahoo.com"],
  ["dummy"]
];

function makeDomainLookup(arr) {
  var out = {};
  var arrLength = arr.length;
  for (var i = 0; i < arrLength; i++) {
    var inLength = arr[i].length;
    for (var j = 0; j < inLength; j++) {
      out[arr[i][j]] = arr[i];
    }
  }
  return out;
}

var DomainLookup = makeDomainLookup(multiDomainFirstPartiesArray);

function isMultiDomainFirstParty(domain1, domain2) {
  if (domain1 in DomainLookup) {
    return (DomainLookup[domain1].indexOf(domain2) >= 0);
  }
  return false;
}

console.log(isMultiDomainFirstParty("dummy", "dummy"));
console.log(isMultiDomainFirstParty("google.com", "youtube.com"));
console.log(isMultiDomainFirstParty("google.com", "nyt.com"));
